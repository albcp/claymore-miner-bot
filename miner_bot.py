#!/usr/bin/python3
import socket
import json
import telebot
import time
from multiprocessing import Process
from config import *
bot = telebot.TeleBot(token)


def contact_miner(r,ip,port):
    if r == "info":
        request = b'{"id":0,"jsonrpc":"2.0","method":"miner_getstat1"}'
    elif r == "restart_miner":
        request = b'{"id":0,"jsonrpc":"2.0","method":"miner_restart"}'
    elif r == "reboot_rig":
        request = b'{"id":0,"jsonrpc":"2.0","method":"miner_reboot"}'

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        try:
            s.connect((ip, port))
        except Exception:
            return None
        s.sendall(request)
        data = s.recv(1024)
        if data != b'':
            return(json.loads(data.decode('utf-8'))['result'])

def is_owner(message):
    if message.from_user.id == my_id:
        return True
    else:
        bot.reply_to(message, "https://github.com/albcp/claymore-miner-bot")


def check_status():
    rigs_status = {}
    while(True):
        report = ''
        for rig in rigs:
            answer = contact_miner("info",rig[1],rig[2])
            if answer != None:
                status = 'on';
            else:
                status = 'off';
            if rig[0] in rigs_status:
                if rigs_status[rig[0]] != status:
                    report += '\n*{}* is now *{}*'.format(rig[0], status)
            rigs_status[rig[0]] = status
        if report != '':
            bot.send_message(my_id, report, parse_mode="markdown")
            report = ''
        time.sleep(60)

		
		
@bot.message_handler(commands=['start','help'])
def send_commands(message):
    if not is_owner(message):
        return None
    bot.reply_to(message, "/hashrate - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ö–µ—à—Ä–µ–π—Ç.\n/main - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ö–µ—à—Ä–µ–π—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π GPU.\n/dual - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ö–µ—à—Ä–µ–π—Ç –≤—Ç–æ—Ä–∏—á–Ω–æ–π –≤–∞–ª—é—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π GPU..\n/gpu_info - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –æ–±–æ—Ä–æ—Ç—ã –∫—É–ª–µ—Ä–æ–≤ GPU.\n/info - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–µ—Ä—Å–∏—é –º–∞–π–Ω–µ—Ä–∞ –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã.\n/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–∞ Claymore\n/reboot - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –†–∏–≥–∞ (–í—ã–∑—ã–≤–∞–µ—Ç Reboot.bat(sh) –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–∞–π–Ω–µ—Ä–∞).\n/status - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å —Ä–∏–≥–æ–≤(–í–ö–õ/–í–´–ö–õ).\n/help - –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@bot.message_handler(commands=['hashrate'])
def send_total(message):
    if not is_owner(message):
        return None
    reply=''
    for rig in rigs:
        reply += "\n\n*‚õè" + rig[0] + "‚õè*\n"
        answer = contact_miner("info",rig[1],rig[2])
        if answer != None:
            main_raw=answer[2].split(';')
            reply += '*–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞*:\n    –•—ç—à—Ä–µ–π—Ç: {:0.3f} Mh/s\n    –ù–∞–π–¥–µ–Ω–æ —à–∞—Ä: {}\n    –û—Ç–∫–ª–æ–Ω–µ–Ω—ã—Ö —à–∞—Ä: {}'.format(int(main_raw[0])/1000, main_raw[1], main_raw[2])
            if len(answer[7].split(";"))==2:
                dual_raw=answer[4].split(';')
                reply += '\n*–í—Ç–æ—Ä–∏—á–Ω–∞—è –≤–∞–ª—é—Ç–∞*:\n    –•—ç—à—Ä–µ–π—Ç: {:0.3f} Mh/s\n    –ù–∞–π–¥–µ–Ω–æ —à–∞—Ä: {}\n    –û—Ç–∫–ª–æ–Ω–µ–Ω—ã—Ö —à–∞—Ä: {}'.format(int(dual_raw[0])/1000, dual_raw[1], dual_raw[2])
        else:
            reply += "\n–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ä–∏–≥–æ–º *{0[0]}*, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö *IP {0[1]}* –∏ *–ø–æ—Ä—Ç–∞ {0[2]}* ".format(rig)
    bot.reply_to(message, reply,parse_mode="markdown")

@bot.message_handler(commands=['gpu_info'])
def send_gpu_info(message):
    if not is_owner(message):
        return None
    reply=''
    for rig in rigs:
        reply += "\n\n*‚õè" + rig[0] + "‚õè*\n"
        answer = contact_miner("info",rig[1],rig[2])
        if answer != None:
            gpus = answer[6].split(';')
            reply += "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU:*"
            for x in range(0,len(gpus)//2):
                reply += "\n    *GPU{}:* üå°Ô∏è{}¬∫C   üå¨Ô∏è{}%".format(x, gpus[x*2], gpus[x*2+1])
                #reply += "\n    *GPU{}:*\n        –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {}¬∫C\n        –û–±–æ—Ä–æ—Ç—ã –∫—É–ª–µ—Ä–∞: {}%".format(x, gpus[x*2], gpus[x*2+1])
        else:
            reply += "\n–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ä–∏–≥–æ–º *{0[0]}*, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö *IP {0[1]}* –∏ *–ø–æ—Ä—Ç–∞ {0[2]}* ".format(rig)
    bot.reply_to(message, reply,parse_mode="markdown")

@bot.message_handler(commands=['main'])
def send_main_hashrate(message):
    if not is_owner(message):
        return None
    reply=''
    for rig in rigs:
        reply += "\n\n*‚õè" + rig[0] + "‚õè*\n"
        answer = contact_miner("info",rig[1],rig[2])
        if answer != None:
            single = answer[3].split(';')
            reply += "*–•–µ—à—Ä–µ–π—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π GPU:\n*"
            for x, hashrate in enumerate(single):
                reply += "\t    *GPU{}:* {:0.3f} Mh/s".format(x,float(hashrate)/1000)
        else:
            reply += "\n–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ä–∏–≥–æ–º *{0[0]}*, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö *IP {0[1]}* –∏ *–ø–æ—Ä—Ç–∞ {0[2]}* ".format(rig)
    bot.reply_to(message, reply,parse_mode="markdown")

@bot.message_handler(commands=['dual'])
def send_dual_hashrate(message):
    if not is_owner(message):
        return None
    reply=''
    for rig in rigs:
        reply += "\n\n*‚õè" + rig[0] + "‚õè*"
        answer = contact_miner("info",rig[1],rig[2])
        if answer != None:
            single = answer[5].split(';')
            for x, hashrate in enumerate(single):
                if hashrate != 'off':
                    reply += "\n    *GPU{}:* {:0.3f} Mh/s".format(x,float(hashrate)/1000)
                else:
                    reply += "\n    *GPU{}:* –î—É–∞–ª –º–∞–π–Ω–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω".format(x)
        else:
            reply += "\n–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ä–∏–≥–æ–º *{0[0]}*, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö *IP {0[1]}* –∏ *–ø–æ—Ä—Ç–∞ {0[2]}* ".format(rig)
    bot.reply_to(message, reply,parse_mode="markdown")

@bot.message_handler(commands=['info'])
def send_info(message):
    if not is_owner(message):
        return None
    reply=''
    for rig in rigs:
        reply += "\n\n*‚õè" + rig[0] + "‚õè*\n"
        answer = contact_miner("info",rig[1],rig[2])
        if answer != None:
            time=int(answer[1])
            reply += "*–í–µ—Ä—Å–∏—è:* {}\n*–ê–ø—Ç–∞–π–º:* {} –î–Ω–µ–π, {} –ß–∞—Å–æ–≤, {} –ú–∏–Ω—É—Ç.".format(answer[0], time//60//24, time//60%24, time%60)
        else:
            reply += "\n–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ä–∏–≥–æ–º *{0[0]}*, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö *IP {0[1]}* –∏ *–ø–æ—Ä—Ç–∞ {0[2]}* ".format(rig)
    bot.reply_to(message, reply,parse_mode="markdown")

@bot.message_handler(commands=['status'])
def status(message):
    if not is_owner(message):
        return None
    reply=''
    for rig in rigs:
        answer = contact_miner("info",rig[1],rig[2])
        if answer != None:
            status = '–í–∫–ª. ‚úÖ'
        else:
            status = '–í—ã–∫–ª. üî¥'
        reply += "*{}* —Å–µ–π—á–∞—Å {}\n".format(rig[0], status)
    bot.reply_to(message, reply,parse_mode="markdown")


@bot.message_handler(commands=['restart'])
def restart(message):
    if not is_owner(message):
        return None
    choose = message.text[9:]
    reply = ''
    if choose != '':
        if choose == 'all':
            reply = '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ *–í–°–ï–•* —Ä–∏–≥–∞—Ö'
            for rig in rigs:
                contact_miner("restart_miner",rig[1],rig[2])
        else:
            for rig in rigs:
                if choose in rig:
                    contact_miner("restart_miner",rig[1],rig[2])
                    reply = "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ *{}*".format(rig[0])
    else:
        reply = "–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∏–º—è —Ä–∏–≥–∞ –ø–æ—Å–ª–µ /restart –∏–ª–∏ *all* –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Ä–∏–≥–∞—Ö."
    if reply == "":
        reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–π —Ä–∏–≥"
    bot.reply_to(message, reply, parse_mode="markdown")

@bot.message_handler(commands=['reboot'])
def restart(message):
    if not is_owner(message):
        return None
    choose = message.text[8:]
    reply = ''
    if choose != '':
        if choose == 'all':
            reply = '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –í—Å–µ—Ö —Ä–∏–≥–æ–≤'
            for rig in rigs:
                contact_miner("reboot_rig",rig[1],rig[2])
        else:
            for rig in rigs:
                if choose in rig:
                    contact_miner("reboot_rig",rig[1],rig[2])
                    reply = "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ *{}*".format(rig[0])
    else:
        reply = "–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∏–º—è —Ä–∏–≥–∞ –ø–æ—Å–ª–µ /reboot –∏–ª–∏ *all* –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–∞–π–Ω–µ—Ä–æ–≤ –Ω–∞ –≤—Å–µ—Ö —Ä–∏–≥–∞—Ö."
    if reply == "":
        reply = "–ò–∑–≤–∏–Ω–∏—Ç–µ —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–π —Ä–∏–≥"
    bot.reply_to(message, reply, parse_mode="markdown")


alarm = Process(target=check_status)
alarm.start()

bot.polling()
